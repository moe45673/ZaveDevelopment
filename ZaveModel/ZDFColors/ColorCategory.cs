///////////////////////////////////////////////////////////
//  ColorCategory.cs
//  Implementation of the Class ColorCategory
//  Generated by Enterprise Architect
//  Created on:      28-Mar-2016 9:30:09 AM
//  Original author: Moe
///////////////////////////////////////////////////////////

using System;
using System.Drawing;
using WPFColor = System.Windows.Media.Color;
using Newtonsoft.Json;






namespace ZaveModel.ZDFColors {

    /// <summary>
    /// Class to hold all info about Colors that Zave may need
    /// </summary>
    [JsonObject(MemberSerialization.OptIn)]
    public class ColorCategory : IComparable<ColorCategory>
    {
        
        
        private ColorCategory(Color col) {
            Color = col;
        }

        public ColorCategory(Color col, String name) : this(col)
        {
            Name = name;
        }

        ~ColorCategory() {

        }
        /// <summary>
        /// The System.Drawing.Color of the ZaveColor
        /// </summary>
        [JsonProperty]
        public Color Color
        {
            get;
            set;
        }

        /// <summary>
        /// Name of the color. Most of the time, should be the same as Color.Name
        /// </summary>
        [JsonProperty]
        public String Name
        {
            get;
            set;
        }

        /// <summary>
        /// Returns the System.Windows.Media.Color representation of the color. It should no longer be used and instead the ColorHelper static class should be used.
        /// </summary>
        /// <returns></returns>
        public WPFColor toWPFColor()
        {
            WPFColor wCol = WPFColor.FromArgb(Color.A, Color.R, Color.G, Color.B);
            return wCol;
        }

        /// <summary>
        /// Takes a System.Windows.Media.Color and returns a ColorCategory. It should no longer be used and instead the ColorHelper static class should be used.
        /// </summary>
        /// <param name="wCol">The System.Windows.Media.Color to turn into ColorCategory</param>
        /// <returns>A ColorCategory representation of the input parameter</returns>
        public static ColorCategory FromWPFColor(WPFColor wCol)
        {
            
            ColorCategory colCat = null;
            string colorName = "";
            try
            {
                if (Convert.ToString(wCol) == "#00000000")
                    colorName = "White";
                else
                colorName = GetWPFColorName(wCol);
            }
            catch (System.Data.ObjectNotFoundException onf)
            {
                System.Windows.Forms.MessageBox.Show("The Specified Color Could Not Be Found", "Color Not Found", System.Windows.Forms.MessageBoxButtons.OKCancel, System.Windows.Forms.MessageBoxIcon.Warning);
            }
            finally
            {
                colCat = new ColorCategory(Color.FromArgb(wCol.A, wCol.R, wCol.G, wCol.B), colorName);
                
            }
            return colCat;

        }

        /// <summary>
        /// Returns a 
        /// </summary>
        /// <param name="str"></param>
        /// <returns></returns>
        public static ColorCategory ParseFromString(string str)
        {
            ColorConverter converter = new ColorConverter();
            Color color = new Color();
            try
            {
                color = (Color)converter.ConvertFromString(str);
                
            }
            catch(NotSupportedException nse)
            {
                throw nse;
            }
            
            var name = str;
            return new ColorCategory(color, name);

        }

        private static string GetWPFColorName(WPFColor color)
        {
            Type colors = typeof(System.Windows.Media.Colors);
            foreach (var prop in colors.GetProperties())
            {
                if (((System.Windows.Media.Color)prop.GetValue(null, null)) == color)
                    return prop.Name;
            }

            throw new System.Data.ObjectNotFoundException("The provided Color is not named.");
        }

        /// <summary>
        /// Compares two ColorCategory classes. Note that the comparison is based off the color's ARGB value
        /// </summary>
        /// <param name="other">The ColorCategory instance to compare with this one</param>
        /// <returns>-1 if this instance precedes the other, 0 if equal, 1 if it follows the other</returns>
        public int CompareTo(ColorCategory other)
        {
            return this.Color.ToArgb().CompareTo(other.Color.ToArgb());
        }
    }//end ColorCategory
}