///////////////////////////////////////////////////////////
//  ZDFEntry.cs
//  Implementation of the Interface IZDFEntry
//  Generated by Enterprise Architect
//  Created on:      28-Mar-2016 8:22:27 AM
//  Original author: Moshe
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.ComponentModel;
using System.Linq;
using ZaveGlobalSettings.Data_Structures;
using Prism.Mvvm;
using ZaveGlobalSettings.Data_Structures.ZaveObservableCollection;
using ZaveModel.ZDFColors;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;


namespace ZaveModel.ZDFEntry {

    
    using CommentList = ObservableImmutableList<IEntryComment>;

    [JsonObject]
    //[JsonConverter(typeof(ZDFEntryConverter))]
    public class ZDFEntry : BindableBase, IZDFEntry
    {





        [JsonIgnore]
        private int _id;
        [JsonProperty]
        public int ID { get { return _id; } }



        public ZDFEntry()
        {
            m_IEntryComment = new CommentList();
            //Source = new ZaveGlobalSettings.Data_Structures.SelectionState();
            _id = ZDF.ZDFSingleton.setID();
            HColor = new ColorCategory(default(System.Drawing.Color), "");
            _page = "";
            _name = "";
            _text = "";
            _dateModified = default(DateTime);
            _format = default(SrcType);
        }

        public ZDFEntry(SelectionState src) : this()
        {
            m_IEntryComment = new CommentList();

            src.Comments.ForEach(item => Comments.Add(item as IEntryComment));

            _id = src.ID;
            _page = src.SelectionPage;
            _name = src.SelectionDocName;
            _text = src.SelectionText;
            _dateModified = src.SelectionDateModified;
            _format = src.srcType;
            _hColor = new ColorCategory(src.Color, src.Color.Name);


        }

        ~ZDFEntry()
        {

        }

        public SelectionState toSelectionState()
        {
            return new SelectionState(this.ID, this.Name, this.Page, this.Text, this.DateModified, this.HColor.Color, this.Format, this.Comments.ToList<object>());
        }


        #region Properties
        [JsonIgnore]
        private ColorCategory _hColor;
        [JsonProperty]
        public ColorCategory HColor
        {
            get { return _hColor; }
            set
            {
                SetProperty(ref _hColor, value);
            }

        }

        //private ZaveGlobalSettings.Data_Structures.SelectionState _source;
        //public ZaveGlobalSettings.Data_Structures.SelectionState Source
        //{
        //    get { return _source; }
        //    set
        //    {
        //        _source = value;
        //        //OnPropertyChanged("Source", Source);
        //    }
        //}
        [JsonIgnore]
        private string _page;
        [JsonProperty]
        public string Page
        {
            get { return _page; }
            set
            {
                SetProperty(ref _page, value);
            }
        }

        [JsonIgnore]
        private string _text;
        [JsonProperty]
        public string Text
        {
            get { return _text; }
            set
            {
                SetProperty(ref _text, value);
            }
        }
        [JsonIgnore]
        private DateTime _dateModified;
        [JsonProperty]
        public DateTime DateModified
        {
            get { return _dateModified; }
            set
            {
                SetProperty(ref _dateModified, value);
            }
        }
        [JsonIgnore]
        private SrcType _format;
        [JsonProperty]
        [JsonConverter(typeof(StringEnumConverter))]
        public SrcType Format
        {
            get { return _format; }
            set
            {
                SetProperty(ref _format, value);
            }
        }
        [JsonIgnore]
        private string _name;
        [JsonProperty]
        public string Name
        {
            get { return _name; }
            set
            {
                SetProperty(ref _name, value);
            }
        }

        [JsonIgnore]
        private CommentList m_IEntryComment;
        [JsonProperty]
        public CommentList Comments
        {
            get { return m_IEntryComment; }
            set { m_IEntryComment = value; }
        }

        #endregion


    }

    //end ZDFEntry

    class ZDFEntryConverter : JsonConverter
    {
        public override bool CanConvert(Type objectType)
        {
            return objectType == typeof(List<EntryComment>);
        }

        public override bool CanWrite
        {
            get
            {
                return false;
            }
        }

        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var entry = new ZDFEntry
            {
                //Comments = (List<EntryComment>) jsonObject.Se
            };
            //switch (jsonObject["JobTitle"].Value())
            //{
            //    case "Software Developer":
            //        profession = new Programming();
            //        break;
            //    case "Copywriter":
            //        profession = new Writing();
            //        break;
            //}



            //serializer.Populate(jsonObject.CreateReader(), commentList);
            //return commentList;
            return new object();
        }

        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new NotImplementedException();
        }
    }


}//end namespace ZDFEntry