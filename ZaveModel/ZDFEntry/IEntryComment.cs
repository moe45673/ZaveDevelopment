///////////////////////////////////////////////////////////
//  IEntryComment.cs
//  Implementation of the Interface IEntryComment
//  Generated by Enterprise Architect
//  Created on:      28-Mar-2016 9:30:09 AM
//  Original author: Moshe
///////////////////////////////////////////////////////////

using System;
using Prism.Mvvm;
using Newtonsoft.Json;
using System.Collections;
using System.Collections.Generic;
using ZaveGlobalSettings.Data_Structures.CustomAttributes;

//using System.Security.Principal;



namespace ZaveModel.ZDFEntry {

    /// <summary>
    /// The class for identifying a User of the system
    /// </summary>
    [JsonObject]
    [PlaceHolder(Name = "Author", Description = "To be used until a proper User Authentication system is implemented")]
    public class User
    {

        /// <summary>
        /// The Name of the user
        /// </summary>
        [JsonProperty]
        public string Name { get; set; }

        /// <summary>
        /// Explicit cast from String to create new User object
        /// </summary>
        /// <param name="s">Name of the new user</param>
        public static explicit operator User(string s)  // explicit string to User conversion operator
        {
            User u = new User();
            u.Name = s;
            return u;
        }
        /// <summary>
        /// Explicit cast of a User to a string
        /// </summary>
        /// <param name="u">The User to input in a string field</param>
        public static explicit operator string(User u = null)  // explicit User to string conversion operator
        {
            try
            {
                return u.Name;
            }
            catch(NullReferenceException nre)
            {
                throw nre;
            }
        }

    }

    /// <summary>
    /// EqualityComparer implementation for comparing Comments
    /// </summary>
    public class CommentEqualityComparer : EqualityComparer<IEntryComment>
    {
        public override bool Equals(IEntryComment x, IEntryComment y)
        {
            return x.CommentID == y.CommentID;
        }

        public override int GetHashCode(IEntryComment obj)
        {
            
            return obj.CommentID.GetHashCode() * obj.CommentText.GetHashCode() * obj.Author.GetHashCode();
        }
    }

    /// <summary>
    /// Interface that all Zave Comment classes implement
    /// </summary>
    public interface IEntryComment {

        

        int CommentID
        {
            get;
            
        }

		string CommentText{
			get;
			set;
		}

        User Author
        {
            get;
            set;
        }

		
	}//end IEntryComment

    /// <summary>
    /// Keeps track of all IDs
    /// </summary>
    internal static class IDTracker
    {
        private static int idCounter = 0;

        public static void setCommentID(IEntryComment comment, out int id)
        {
            if (comment == null)
                throw new InvalidOperationException();

            id = idCounter++;


        }
    }


    /// <summary>
    /// Comments made by Users on various ZDF attributes
    /// </summary>
    [JsonObject]
    public class EntryComment : BindableBase, IEntryComment
    {

        

            /// <summary>
            /// Create a new EntryComment
            /// </summary>
            /// <param name="commText">Text of the Comment</param>
            /// <param name="author">User who wrote the comment</param>
        public EntryComment(string commText = "", string author = default(string) ) : base()
        {
            _commentText = commText;
            _author = (User)author;
            IDTracker.setCommentID(this, out _commentID);
            

            

        }
        /// <summary>
        /// Create a new EntryComment
        /// </summary>
        /// <param name="newComm">Comment instance that new Comment should take its deatils from</param>
        /// <param name="SameID">If this is code that already exists, then give it the same ID and do not create a new object in the DB</param>
        /// <remarks>This is terrible code, it puts the responsibility on deciding if the code is a duplicate or not on the calling method. Needs a redesign</remarks>
        public EntryComment(IEntryComment newComm, bool SameID = false) : this(newComm.CommentText, newComm.Author.Name)
        {
            if (SameID)
            {
                CommentID = newComm.CommentID;
            }
        }

        //public override bool Equals(object obj)
        //{
        //    var commEq = new CommentEqualityComparer();
        //    return commEq.Equals(this as IEntryComment, obj as IEntryComment);
        //}

        //public override int GetHashCode()
        //{
        //    return new CommentEqualityComparer().GetHashCode(this as IEntryComment);
        //}


        [JsonIgnore]
        private int _commentID;
        /// <summary>
        /// Identifier for the comment
        /// </summary>
        [JsonProperty]
        public int CommentID
        {
            get { return this._commentID; }
            private set { SetProperty(ref _commentID, value); }
        }

        [JsonIgnore]
        private string _commentText;
        [JsonProperty]
        public string CommentText
        {
            get { return this._commentText; }
            set { SetProperty(ref _commentText, value); }
        }

        [JsonIgnore]
        private User _author;
        [JsonProperty]
        public User Author
        {
            get { return this._author; }
            set { SetProperty(ref _author, value); }
        }

        

        
    }

}//end namespace ZDFEntry

